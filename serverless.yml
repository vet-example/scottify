service: guest-lambda

provider:
  name: aws
  runtime: nodejs6.10
  region: eu-west-1
  stage: ${opt:stage, self:custom.defaultStage}
  environment:
    TABLE_NAME: ${self:resources.Resources.GuestsDB.Properties.TableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:resources.Resources.GuestsDB.Properties.TableName}"

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  defaultStage: dev
  serverless-offline:
    babelOptions:
      presets: ["es2015"]

functions:
  invite:
    handler: out/lambdas/guests/invite.handler
    events:
      - http:
          path: guests/invite/{name}
          method: put
          request: 
          parameters: 
             paths: 
               name: true
  show:
    handler: out/lambdas/guests/show.handler
    events:
      - http:
          path: guests/{name}
          method: get
          request: 
          parameters: 
             paths: 
               name: true

resources:
  Resources:
    GuestsDB:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: name
            AttributeType: S
          -
            AttributeName: age
            AttributeType: N
        KeySchema:
          -
            AttributeName: name
            KeyType: HASH
          -
            AttributeName: age
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: Attendees-${self:provider.stage}